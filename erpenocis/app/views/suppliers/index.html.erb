<%= render 'layouts/date_form' %>
<div class="card">
  <div class="card-body">
    <p class="card-title">Furnizori</p>
    <ul class="nav nav-tabs" id="suppliers" role="tablist">
      <li class="nav-item" role="presentation">
        <button class="nav-link <%= "active" if @current_tab=="fe" %>" id="issued-supplier-invoices-tab" data-bs-toggle="tab" data-bs-target="#issued-supplier-invoices" type="button" role="tab" aria-controls="issued-supplier-invoices" aria-selected="true">Facturi emise</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link <%= "active" if @current_tab=="fp" %>" id="to-be-payed-supplier-invoices-tab" data-bs-toggle="tab" data-bs-target="#to-be-payed-supplier-invoices" type="button" role="tab" aria-controls="to-be-payed-supplier-invoices" aria-selected="false">Facturi de plata</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link <%= "active" if @current_tab=="fa" %>" id="payed-supplier-invoices-tab" data-bs-toggle="tab" data-bs-target="#payed-supplier-invoices" type="button" role="tab" aria-controls="payed-supplier-invoices" aria-selected="false">Facturi achitate</button>
      </li>
      <li class="nav-item" role="presentation">
        <button class="nav-link <%= "active" if @current_tab=="fr" %>" id="unpaid-supplier-invoices-tab" data-bs-toggle="tab" data-bs-target="#unpaid-supplier-invoices" type="button" role="tab" aria-controls="unpaid-supplier-invoices" aria-selected="false">Facturi restante</button>
      </li>
    </ul>
    <div class="tab-content" id="employeesContent">
      <div class="tab-pane fade <%= "show active" if params[:current_tab]=="fe" %>" id="issued-supplier-invoices" role="tabpanel" aria-labelledby="issued-supplier-invoices-tab">
        <%= render 'table', of_what: "issued_supplier_invoices" %>
      </div>
      <div class="tab-pane fade <%= "show active" if params[:current_tab]=="fp" %>" id="to-be-payed-supplier-invoices" role="tabpanel" aria-labelledby="to-be-payed-supplier-invoices-tab">
        <%= render 'table', of_what: "to_be_payed_supplier_invoices" %>
      </div>
      <div class="tab-pane fade <%= "show active" if params[:current_tab]=="fa" %>" id="payed-supplier-invoices" role="tabpanel" aria-labelledby="payed-supplier-invoices-tab">
        <%= render 'table', of_what: "payed_supplier_invoices" %>
      </div>
      <div class="tab-pane fade <%= "show active" if params[:current_tab]=="fr" %>" id="unpaid-supplier-invoices" role="tabpanel" aria-labelledby="unpaid-supplier-invoices-tab">
        <%= render 'table', of_what: "unpaid_supplier_invoices" %>
      </div>
    </div>

    <br>

    <%= link_to 'Adauga furnizor', new_supplier_path(new: true, current_tab: "fe", sm: @start_month, sy: @start_year, em: @end_month, ey: @end_year) %>
  </div>
</div>
<script>
 
  $(document).ready(function(){
    

    function getHeaderNames(table) {
      // Gets header names.
      //params:
      //  table: table ID.
      //Returns:
      //  Array of column header names.
      
      var header = $(table).DataTable().columns().header().toArray();

      var names = [];
      header.forEach(function(th) {
      names.push($(th).html());
      });
          
      return names;
    }
    
    function buildCols(data) {
      // Builds cols XML.
      //To do: deifne widths for each column.
      //Params:
      //  data: row data.
      //Returns:
      //  String of XML formatted column widths.
      
      var cols = '<cols>';
      
      for (i=0; i<data.length; i++) {
        colNum = i + 1;
        cols += '<col min="' + colNum + '" max="' + colNum + '" width="20" customWidth="1"/>';
      }
      
      cols += '</cols>';
      
      return cols;
    }
    
    function buildRow(data, rowNum, styleNum) {
      // Builds row XML.
      //Params:
      //  data: Row data.
      //  rowNum: Excel row number.
      //  styleNum: style number or empty string for no style.
      //Returns:
      //  String of XML formatted row.
      var style = styleNum ? ' s="' + styleNum + '"' : '';
      
      var row = '<row r="' + rowNum + '">';
      for (i=0; i<data.length; i++) {
        colNum = (i + 10).toString(36).toUpperCase();  // Convert to alpha
        
        var cr = colNum + rowNum;
        
        row += '<c t="inlineStr" r="' + cr + '"' + style + '>' +
                '<is>' +
                  '<t>' + data[i] + '</t>' +
                '</is>' +
              '</c>';
      }
      row += '</row>';
          
      return row;
    }
    
    function getTableData(table, title) {
      // Processes Datatable row data to build sheet.
      //Params:
      //  table: table ID.
      //  title: Title displayed at top of SS or empty str for no title.
      //Returns:
      //  String of XML formatted worksheet.
      
      var header = getHeaderNames(table);
      var table = $(table).DataTable();
      var rowNum = 1;
      var mergeCells = '';
      var ws = '';
      
      ws += buildCols(header);
      ws += '<sheetData>';
      
      if (title.length > 0) {
        ws += buildRow([title], rowNum, 51);
        rowNum++;
        
        mergeCol = ((header.length - 1) + 10).toString(36).toUpperCase();
        
        mergeCells = '<mergeCells count="1">'+
          '<mergeCell ref="A1:' + mergeCol + '1"/>' +
                    '</mergeCells>';
      }
                        
      ws += buildRow(header, rowNum, 2);
      rowNum++;
      
      // Loop through each row to append to sheet.    
      table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
        var data = this.data();
        
        // If data is object based then it needs to be converted 
        // to an array before sending to buildRow()
        let x = []
        for (const [key, value] of Object.entries(data)) {
         value["@data-order"] ? x.push(value["@data-order"]) : x.push("")
        }
        ws += buildRow(x, rowNum, '');
        
        rowNum++;
      } );
      
      ws += '</sheetData>' + mergeCells;
          
      return ws;

    }
    
    function setSheetName(xlsx, name) {
      // Changes tab title for sheet.
      //Params:
      //  xlsx: xlxs worksheet object.
      //  name: name for sheet.
      
      if (name.length > 0) {
        var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
        source.setAttribute('name', name);
      }
    }
    
    function addSheet(xlsx, table, title, name, sheetId) {
      //Clones sheet from Sheet1 to build new sheet.
      //Params:
      //  xlsx: xlsx object.
      //  table: table ID.
      //  title: Title for top row or blank if no title.
      //  name: Name of new sheet.
      //  sheetId: string containing sheetId for new sheet.
      //Returns:
      //  Updated sheet object.
      
      //Add sheet2 to [Content_Types].xml => <Types>
      //============================================
      var source = xlsx['[Content_Types].xml'].getElementsByTagName('Override')[sheetId-1];
      var clone = source.cloneNode(true);
      clone.setAttribute('PartName',`/xl/worksheets/sheet${sheetId}.xml`);
      xlsx['[Content_Types].xml'].getElementsByTagName('Types')[0].appendChild(clone);
      
      //Add sheet relationship to xl/_rels/workbook.xml.rels => Relationships
      //=====================================================================
      var source = xlsx.xl._rels['workbook.xml.rels'].getElementsByTagName('Relationship')[0];
      var clone = source.cloneNode(true);
      clone.setAttribute('Id',`rId${sheetId+1}`);
      clone.setAttribute('Target',`worksheets/sheet${sheetId}.xml`);
      xlsx.xl._rels['workbook.xml.rels'].getElementsByTagName('Relationships')[0].appendChild(clone);
      
      //Add second sheet to xl/workbook.xml => <workbook><sheets>
      //=========================================================
      var source = xlsx.xl['workbook.xml'].getElementsByTagName('sheet')[0];
      var clone = source.cloneNode(true);
      clone.setAttribute('name', name);
      clone.setAttribute('sheetId', sheetId);
      clone.setAttribute('r:id',`rId${sheetId+1}`);
      xlsx.xl['workbook.xml'].getElementsByTagName('sheets')[0].appendChild(clone);
      
      //Add sheet2.xml to xl/worksheets
      //===============================
      var newSheet = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'+
        '<worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac" mc:Ignorable="x14ac">'+
        getTableData(table, title) +
        
        '</worksheet>';

      xlsx.xl.worksheets[`sheet${sheetId}.xml`] = $.parseXML(newSheet);
      
    }
    $('button[data-bs-toggle="tab"]').on('shown.bs.tab', function (e) {
        $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
    });
    // var $tables = $('#toTable, #nsTable');
    var table = $("#feTable").DataTable({
      order: [],
      paging:   true,
      ordering: true,
      info:     false,
      filter: true,
      stateSave: true,
      "stateSaveCallback": function (settings, data) {

        // var that = this;
        // $tables.each(function(index){    
        //   // If table is other than the initial table
        //   if(this.id !== that.id){
        //     // Set page length, save state and redraw the table
        //     $(this).DataTable()
        //         .page.len(data.length)
        //         .state.save();
        //   }         
        // });
      },
      dom: '<"top"<"d-flex justify-content-between"Bf>>rt<"bottom"><"d-flex justify-content-between align-items-center"lp><"clear">',
      "lengthMenu": [ [25, 50, 100, -1], [25, 50, 100, "Toate"] ],
      pagingType: 'full_numbers',
      scrollY: 280,
      scrollX: true,
      fixedColumns:   true,
      fixedColumns: {
        left: 3
      },
      scroller:    true,
      buttons: [
        { extend: 'excelHtml5', 
          text: '<i class="far fa-file-excel"></i> &nbsp;Exporta in excel',
          className: 'btn-success text-light btn-sm',
          customize: function( xlsx ) {
            setSheetName(xlsx, 'Facturi emise');
            addSheet(xlsx, '#fpTable', 'Facturi de plata', 'Facturi de plata', '2');
            addSheet(xlsx, '#faTable', 'Facturi achitate', 'Facturi achitate', '3');
            addSheet(xlsx, '#frTable', 'Facturi restante', 'Facturi restante', '4');
          }
        }, 'spacer',
        {
          extend: 'searchPanes',
          config: {
            cascadePanes: true 
          },
          className: 'btn-info text-light btn-sm' 
        }
      ],
      columnDefs: [
        {
        searchable: true,
        targets: [0,2],
        searchPanes: {
          show: true
        },
        },
        {
          orderable: false,
          targets: [2,-1]
        },
        {
          searchable: false,
          targets: '_all',
          searchPanes: {
            show: false
          }
        }
      ],
      select: {
        style: 'os',
        selector: 'td:first-child'
      },
      language: {
        processing:     "Se proceseaza...",
        search:         "Cauta&nbsp;:",
        lengthMenu:    "Afiseaza cate _MENU_ furnizori",
        info:           "Se afiseaza furnizorii de la _START_ pana la _END_ din _TOTAL_ furnizori",
        infoEmpty:      "Se afiseaza furnizorii de la 0 pana la 0 din 0 furnizori",
        infoFiltered:   "(filtrate din _MAX_ furnizori in total)",
        infoPostFix:    "",
        loadingRecords: "Se incarca datele...",
        zeroRecords:    "Nici un furnizor de afisat",
        emptyTable:     "Nu exista furnizori in baza de date",
        paginate: {
            first:      "Prima pagina",
            previous:   "Pagina anterioara",
            next:       "Pagina urmatoare",
            last:       "Ultima pagina"
        },
        aria: {
            sortAscending:  ": activati pentru a sorta coloana în ordine crescatoare",
            sortDescending: ": activati pentru a sorta coloana în ordine descrescatoare"
        },
        select: {
          rows: {
            _: "Ai selectat %d furnizori",
            1: "Ai selectat 1 furnizor"
          }
        },
        searchPanes: {
          clearMessage: 'Sterge filtre',
          showAll: 'Arata',
          collapse: {0: '<i class="fal fa-filter"></i> &nbsp;Filtre', _: '<i class="fas fa-filter"></i> &nbsp;Filtre (%d)'},
          title: {
            _: 'Filtre Selectate - %d',
            0: 'Nici un filtru selectat',
            1: 'Un filtru selectat'
          }
        }
      },
      footerCallback: function (row, data, start, end, display) {
        var api = this.api();

        // Remove the formatting to get integer data for summation
        var intVal = function (i) {
          i === 'string' ? i : typeof i === 'number' ? i : i = i.replace(/\n/ig, '').replace(/&nbsp;/ig, '').replace(/(<([^>]+)>)/ig, '').replace(/\s+/ig, '') ;
            return typeof i === 'string' ? i=="" ? 0 : parseFloat(i)*100 : typeof i === 'number' ? i : 0;
        };
        for (let i = 3; i < api.columns().header().length; i++) {
          pageTotal = api
            .column(i, { page: 'current' })
            .data()
            .reduce(function (a, b) {
              return intVal(a) + intVal(b);
            }, 0);
        
        // Update footer
        $(api.column(i).footer()).html(pageTotal/100);
        } 
        // Total over this page
        
      },
    });

    $('.dt-buttons').removeClass('btn-group');
    $(window).on('pageshow',function(){
      ["fp","fa","fr"].forEach(element =>{
        var element = $(`#${element}Table`).DataTable({
          order: [],
          paging:   true,
          ordering: true,
          info:     false,
          filter: true,
          stateSave: true,
          dom: '<"top"<"d-flex justify-content-between"Bf>>rt<"bottom"><"d-flex justify-content-between align-items-center"lp><"clear">',
          "lengthMenu": [ [25, 50, 100, -1], [25, 50, 100, "Toate"] ],
          pagingType: 'full_numbers',
          scrollY: 280,
          scrollX: true,
          fixedColumns:   true,
          fixedColumns: {
            left: 3
          },
          scroller:    true,
          buttons: [
            { extend: 'excelHtml5', 
              text: '<i class="far fa-file-excel"></i> &nbsp;Exporta in excel',
              className: 'btn-success text-light btn-sm' 
            }, 'spacer',
            {
              extend: 'searchPanes',
              config: {
                cascadePanes: true 
              },
              className: 'btn-info text-light btn-sm' 
            }
          ],
          columnDefs: [
            {
            searchable: true,
            targets: [0,2],
            searchPanes: {
              show: true
            },
            },
            {
              orderable: false,
              targets: [2,-1]
            },
            {
              searchable: false,
              targets: '_all',
              searchPanes: {
                show: false
              }
            }
          ],
          select: {
            style: 'os',
            selector: 'td:first-child'
          },
          language: {
            processing:     "Se proceseaza...",
            search:         "Cauta&nbsp;:",
            lengthMenu:    "Afiseaza cate _MENU_ furnizori",
            info:           "Se afiseaza furnizorii de la _START_ pana la _END_ din _TOTAL_ furnizori",
            infoEmpty:      "Se afiseaza furnizorii de la 0 pana la 0 din 0 furnizori",
            infoFiltered:   "(filtrate din _MAX_ furnizori in total)",
            infoPostFix:    "",
            loadingRecords: "Se incarca datele...",
            zeroRecords:    "Nici un furnizor de afisat",
            emptyTable:     "Nu exista furnizori in baza de date",
            paginate: {
                first:      "Prima pagina",
                previous:   "Pagina anterioara",
                next:       "Pagina urmatoare",
                last:       "Ultima pagina"
            },
            aria: {
                sortAscending:  ": activati pentru a sorta coloana în ordine crescatoare",
                sortDescending: ": activati pentru a sorta coloana în ordine descrescatoare"
            },
            select: {
              rows: {
                _: "Ai selectat %d furnizori",
                1: "Ai selectat 1 furnizor"
              }
            },
            searchPanes: {
              clearMessage: 'Sterge filtre',
              showAll: 'Arata',
              collapse: {0: '<i class="fal fa-filter"></i> &nbsp;Filtre', _: '<i class="fas fa-filter"></i> &nbsp;Filtre (%d)'},
              title: {
                _: 'Filtre Selectate - %d',
                0: 'Nici un filtru selectat',
                1: 'Un filtru selectat'
              }
            }
          },
          footerCallback: function (row, data, start, end, display) {
            var api = this.api();

            // Remove the formatting to get integer data for summation
            var intVal = function (i) {
              i === 'string' ? i : typeof i === 'number' ? i : i = i.replace(/\n/ig, '').replace(/&nbsp;/ig, '').replace(/(<([^>]+)>)/ig, '').replace(/\s+/ig, '') ;
                return typeof i === 'string' ? i=="" ? 0 : parseFloat(i)*100 : typeof i === 'number' ? i : 0;
            };
            for (let i = 3; i < api.columns().header().length; i++) {
              pageTotal = api
                .column(i, { page: 'current' })
                .data()
                .reduce(function (a, b) {
                  return intVal(a) + intVal(b);
                }, 0);
            
            // Update footer
            $(api.column(i).footer()).html(pageTotal/100);
            } 
            // Total over this page
            
          },
        });
        $('.dt-buttons').removeClass('btn-group');
        
      });
      // var is_save_in_progress = false;
      // var $tables = $('#toTable, #nsTable');
      // //, #stTable, #mvTable, #gvTable, #otTable, #esTable
      // $tables
      //   .on( 'stateSaveParams.dt', function (e, settings, data){
          
      //     // Save DOM element
      //       var that = this;
      //       // If state saving is not in progress
      //       if(!is_save_in_progress){
      //         is_save_in_progress = true;
      //         // Iterate over all tables
      //         $tables.each(function(index){
                
      //             // If table is other than the initial table
      //             if(this.id !== that.id){
      //               // Set page length, save state and redraw the table
      //               $(this).DataTable()
      //                   .page.len(data.length)
      //                   .state.save();
      //             }         
      //         });

      //         // Indicate that state saving is over
      //         is_save_in_progress = false;
      //       }            
      // });
    });
    
  });
  
</script>